/*******************************************************************************
 * Copyright (c) 2010-2013, Tamas Szabo, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Tamas Szabo - initial API and implementation
 *   Istvan Rath - minor modifications
 *******************************************************************************/
package library

//import "http://eclipse.org/incquery/xcore/library"
import "library"

// ***** relationships ********
/*
 * CW is the coauthor of W (they share the same book and CW != W) 
 */
pattern coAuthorsOfWriter(W : Writer, CW : Writer) {
	Book(B);
	Writer.books(W, B);
	Writer.books(CW, B);
	W != CW;
}

/*
 * The name of the writer W is N (first name and last name are concatenated)
 */
pattern writerName(W : Writer, N) {
	Writer.firstName(W, FN);
	Writer.lastName(W, LN);
	N == eval(FN + " " + LN);
}

/*
 * N represents the most popular book category of Library L, if that can be defined uniquely:
 * - if there is only one most popular book then that one is returned
 * - if there are two or more categories with the same number of books then 'None' is returned
 */
pattern mostPopularBookCategory(L : Library, N) {
	V == count find mostPopularBookCategory0(L, _CX);
	check(V == 1);
	find mostPopularBookCategory0(L, C);
	N == eval((C as Object).toString);
} or {
	V == count find mostPopularBookCategory0(L, _CX);
	check(V > 1 || V == 0);
	N == "None";
}

/*
 * Category C has the most books in the Library L.
 */
pattern mostPopularBookCategory0(L : Library, C) = {
	Library.books.bookCategory(L, C);
	neg find moreBooksInCategoryThan(_Cx, C);
}
 
/*
 * There are more books with category C1 than books with category C2. 
 */
pattern moreBooksInCategoryThan(C1 : BookCategory, C2 : BookCategory) {
	N == count find categoryOfBook(C1, _B1);
	M == count find categoryOfBook(C2, _B2);
	check(N > M);
	check(C1 != C2);
}

/*
 * The book category of Book B is BookCategory C
 */
pattern categoryOfBook(C : BookCategory, B : Book) {
	Book.bookCategory(B, C);
}

/*
 * The "own" books of writer, i.e. the ones that have only w as the author.
 */
pattern ownBooksOfWriter(W : Writer, B : Book) {
	Writer.books(W, B);
	find numberOfWritersOfBook(B, 1);
} 

/*
 * All of the (transitive) citations of Book b1 contain Book b2.
 */
pattern allBookCitations(B1 : Book, B2 : Book) {
	find bookCitation+(B1, B2);
}

/*
 * Book ref is contained in the set of books that (transitively) reference Book b. 
 */
pattern allReferencesTo(B: Book, Ref: Book){
	find bookCitation+(Ref, B);
}

/*
 * Book b1 cites Book b2.
 */
pattern bookCitation(B1 : Book, B2 : Book) {
	Book.citations(B1, B2);
}

/*
 * Writer W is the writer of Book B.
 */
pattern bookOfWriter(W : Writer, B : Book) {
	Writer.books(W, B);
}

/*
 * Book B is a book of Writer W.
 */
pattern writerOfBook(B : Book, W : Writer) {
	Book.writers(B, W);
}

// ************* numbers **********

/*
 * The average number of coauthors per book of a writer is 
 * the number of coauthors divided by the number of books.  
 */
pattern averageNumberOfCoauthorsPerBook(W : Writer, A) {
	find numberOfBooksOfWriter(W, NumOfBooks);
	NumOfCoAuthors == count find coAuthorsOfWriter(W, _CW);
	A == eval(if (NumOfBooks == 0) 0.0 else NumOfCoAuthors.doubleValue / NumOfBooks.doubleValue);
}

/*
 * The number of (transitive) citations of Book B1 is N.
 */
pattern numberOfCitations(B1 : Book, N) {
	N == count find allBookCitations(B1, _B2);
}

/*
 * The number of the books of Writer W is N.  
 */
pattern numberOfBooksOfWriter(W : Writer, N) {
	N == count find bookOfWriter(W, _B);
}

/*
 * The number of writers of Book B is N. 
 */
pattern numberOfWritersOfBook(B : Book, N) {
	N == count find writerOfBook(B, _W);
}