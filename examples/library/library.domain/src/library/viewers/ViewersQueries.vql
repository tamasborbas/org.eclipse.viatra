/*******************************************************************************
 * Copyright (c) 2010-2013, Tamas Szabo, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Tamas Szabo - initial API and implementation
 *   Istvan Rath - minor modifications
 *******************************************************************************/
package library.viewers

import "library"
//import "http://eclipse.org/incquery/xcore/library"

// Viewers patterns 

// items

@Item(item = l, hierarchy = "root", label = "$l.name$")
pattern library(l) { Library(l); }

@Item(item = w, label = "Writer: $w.name$", hierarchy = "child")
@Format(color = "#626fc9", textColor = "#ffffff")
pattern writer(w) { Writer(w);}

@Item(item = b, label = "Book: $b.title$", hierarchy = "child")
@Format(color = "#b22300", textColor = "#ffffff")
pattern book(b) { Book(b); }

// containment relationships

@ContainsItem(container = l, item = w)
pattern writersInLibrary(w:Writer, l:Library){
	Library.writers(l,w);
}

@ContainsItem(container = l, item = b)
pattern booksInLibrary(b:Book, l:Library){
	Library.books(l,b);
}

// edges

@Edge(source = B, target = Ref, label = "ref+")
@Format(lineStyle = "dashed")
pattern allReferencesTo(B: Book, Ref: Book){
	//find bookCitation+(Ref, B);
	Book.allCitations(Ref,B);
} 

/*
 * Writer w1 is influenced by w2, since he wrote some book
 * that (indirectly or directly) references one of w2's works.
 */
@Edge(source = W1, target = W2, label = "influencedBy")
@Format(lineColor = "#ff0000")
pattern influencedBy(W1: Writer, W2: Writer) {
	Book.writers(B1, W1);
	Book.writers(B2, W2);
	find allReferencesTo(B2, B1);
}

@Edge(source = W, target = B, label = "author")
@QueryExplorer(display = true)
pattern bookOfWriter(W : Writer, B : Book) {
	Writer.books(W, B);
}