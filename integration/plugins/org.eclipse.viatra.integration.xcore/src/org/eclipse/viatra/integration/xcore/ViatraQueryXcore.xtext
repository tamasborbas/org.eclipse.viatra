/*******************************************************************************
 * Copyright (c) 2010-2012, Tamas Szabo, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Tamas Szabo (itemis AG) - initial API and implementation
 *******************************************************************************/
grammar org.eclipse.viatra.integration.xcore.ViatraQueryXcore with org.eclipse.emf.ecore.xcore.Xcore

import "http://www.eclipse.org/emf/2011/Xcore" as base
import "http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage" as patternLanguage
import "http://www.eclipse.org/viatra/query/patternlanguage/ViatraQueryXcoreLanguage"

XViatraQueryPackage:
	{XViatraQueryPackage}
	(annotations+=XAnnotation)*
	'package'
	name = QualifiedName
	(importDirectives += XImportDirective)*
	(importedIncQueries += XViatraQueryImport)*
	(annotationDirectives += XAnnotationDirective)*
	(classifiers += XClassifier)*
;

XViatraQueryImport:
	'import-queries' (importedPatternModel=[patternLanguage::PatternModel|STRING]) (';')?
;

XMember returns base::XMember:
	XOperation |
	XAttribute |
	XReference | 
	XViatraQueryDerivedFeature
;

XViatraQueryDerivedFeature:
    {XViatraQueryDerivedFeature}
    'query-based'
    (reference?='refers')?
    type=XGenericType multiplicity=XMultiplicity?
    name=ID
    'spec' (pattern=[patternLanguage::Pattern|QualifiedName])
    (';')?
;