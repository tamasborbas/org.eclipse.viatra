/*******************************************************************************
 * Copyright (c) 2010-2012, Tamas Szabo, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Tamas Szabo (itemis AG) - initial API and implementation
 *******************************************************************************/
module org.eclipse.viatra.integration.xcore.GenerateViatraQueryXcore

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/eclipse/viatra/integration/xcore/ViatraQueryXcore.xtext"
var fileExtensions = "xvql"
var projectName = "org.eclipse.viatra.integration.xcore"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
		registerGeneratedEPackage = "org.eclipse.viatra.query.patternlanguage.patternLanguage.PatternLanguagePackage"
		registerGenModelFile =
		"platform:/resource/org.eclipse.viatra.query.patternlanguage/model/generated/PatternLanguage.genmodel"
		registerGeneratedEPackage = "org.eclipse.viatra.integration.xcore.model.XcorePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.viatra.integration.xcore.model/model/ViatraQueryXcore.genmodel"
		registerGeneratedEPackage = "org.eclipse.xtext.xbase.XbasePackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI
			fileExtensions = fileExtensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = fileExtensions
			}

			// the Antlr parser
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			    antlrTool = parser.antlr.AntlrToolFacade {
                    askBeforeDownload = false
                }
				options = {
					classSplitting = true
				}
			}

			// the Ecore2Xtext specific terminal converter
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment {}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
			}


			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {
				generateXtendStub = false
			}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}

			// java-based API for content assistance 
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// antlr parser generator tailored for content assist 
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					classSplitting = true
				}
				partialParsing = true
			}

			// provides a compare view
			fragment = compare.CompareFragment {
				fileExtensions = fileExtensions
			}

			fragment = builder.BuilderIntegrationFragment {}

			fragment = generator.GeneratorFragment {
				generateJavaMain = false
				generateMwe = false
			}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment {
				useJdtRefactoring = true
			}

			// Xbase support
			fragment = types.TypesGeneratorFragment {}
			fragment = xbase.XbaseGeneratorFragment {
				generateXtendInferrer = false
				skipExportedPackage = true
			}
		}
	}
}

